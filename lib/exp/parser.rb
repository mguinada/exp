#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'exp/ast'

module Exp
  class Parser < Racc::Parser

def parse(expression, show_tokens = false)
  @tokenizer = Exp::Lexer.new(expression)
  puts @tokenizer.tokenize.inspect if show_tokens

  do_parse
end

def next_token
  @tokenizer.next_token
end
##### State transition tables begin ###

racc_action_table = [
    16,     6,     7,     8,     9,     6,     7,     8,     9,     6,
     7,     8,     9,     6,     7,     8,     9,     6,     7,     8,
     9,     6,     7,     8,     9,     4,     3,     4,     3,     4,
     3,     4,     3,     4,     3,     4,     3,     5,    11 ]

racc_action_check = [
    10,    10,    10,    10,    10,    13,    13,    13,    13,     2,
     2,     2,     2,    14,    14,    14,    14,    12,    12,    12,
    12,    15,    15,    15,    15,     8,     8,     7,     7,     9,
     9,     6,     6,     3,     3,     0,     0,     1,     5 ]

racc_action_pointer = [
    33,    37,     4,    31,   nil,    38,    29,    25,    23,    27,
    -4,   nil,    12,     0,     8,    16,   nil ]

racc_action_default = [
    -2,    -9,    -1,    -9,    -8,    -9,    -9,    -9,    -9,    -9,
    -9,    17,    -3,    -4,    -5,    -6,    -7 ]

racc_goto_table = [
     2,     1,   nil,    10,   nil,   nil,    12,    13,    14,    15 ]

racc_goto_check = [
     2,     1,   nil,     2,   nil,   nil,     2,     2,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_1,
  0, 10, :_reduce_2,
  3, 11, :_reduce_3,
  3, 11, :_reduce_4,
  3, 11, :_reduce_5,
  3, 11, :_reduce_6,
  3, 11, :_reduce_7,
  1, 11, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 17

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :LEFT_BRACKET => 3,
  :RIGHT_BRACKET => 4,
  :ADD => 5,
  :SUB => 6,
  :MULTI => 7,
  :DIV => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "LEFT_BRACKET",
  "RIGHT_BRACKET",
  "ADD",
  "SUB",
  "MULTI",
  "DIV",
  "$start",
  "program",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = Exp::AST.new([val[0]]) 
    result
end

def _reduce_2(val, _values, result)
 result = Exp::AST.new([]) 
    result
end

def _reduce_3(val, _values, result)
 result = Exp::AST::Addition.new(val[0], val[2]) 
    result
end

def _reduce_4(val, _values, result)
 result = Exp::AST::Subtraction.new(val[0], val[2]) 
    result
end

def _reduce_5(val, _values, result)
 result = Exp::AST::Multiplication.new(val[0], val[2]) 
    result
end

def _reduce_6(val, _values, result)
 result = Exp::AST::Division.new(val[0], val[2]) 
    result
end

def _reduce_7(val, _values, result)
 result = Exp::AST::Brackets.new(val[1]) 
    result
end

def _reduce_8(val, _values, result)
 result = Exp::AST::Number.new(val[0]) 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Exp
