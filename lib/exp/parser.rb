#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'exp/ast'

module Exp
  class Parser < Racc::Parser

def parse(expression, show_tokens = false)
  @tokenizer = Exp::Lexer.new(expression)
  puts @tokenizer.tokenize.inspect if show_tokens

  do_parse
end

def next_token
  @tokenizer.next_token
end
##### State transition tables begin ###

racc_action_table = [
     5,     3,     5,     3,     4,    15,     4,     7,     6,    14,
     6,     5,     3,     5,     3,     4,    12,     4,    12,     6,
   nil,     6,     5,     3,     5,     3,     4,   nil,     4,   nil,
     6,   nil,     6,     5,     3,   nil,   nil,     4,    10,    11,
    12,     6,    21,     8,     9,    10,    11,    12,     8,     9,
    10,    11,    12,    10,    11,    12 ]

racc_action_check = [
     0,     0,    12,    12,     0,     7,    12,     1,     0,     4,
    12,    11,    11,     3,     3,    11,    18,     3,    19,    11,
   nil,     3,     8,     8,     9,     9,     8,   nil,     9,   nil,
     8,   nil,     9,    10,    10,   nil,   nil,    10,    17,    17,
    17,    10,    13,    13,    13,    13,    13,    13,     2,     2,
     2,     2,     2,    16,    16,    16 ]

racc_action_pointer = [
    -2,     7,    43,    11,     7,   nil,   nil,     5,    20,    22,
    31,     9,     0,    38,   nil,   nil,    46,    31,     7,     9,
   nil,   nil ]

racc_action_default = [
    -2,   -12,    -1,   -12,   -12,   -10,   -11,   -12,   -12,   -12,
   -12,   -12,   -12,   -12,    -9,    22,    -3,    -4,    -5,    -6,
    -7,    -8 ]

racc_goto_table = [
     2,     1,   nil,    13,   nil,   nil,   nil,   nil,    16,    17,
    18,    19,    20 ]

racc_goto_check = [
     2,     1,   nil,     2,   nil,   nil,   nil,   nil,     2,     2,
     2,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_1,
  0, 13, :_reduce_2,
  3, 14, :_reduce_3,
  3, 14, :_reduce_4,
  3, 14, :_reduce_5,
  3, 14, :_reduce_6,
  3, 14, :_reduce_7,
  3, 14, :_reduce_8,
  2, 14, :_reduce_9,
  1, 14, :_reduce_10,
  1, 14, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :LEFT_BRACKET => 3,
  :RIGHT_BRACKET => 4,
  :ADD => 5,
  :SUB => 6,
  :MULTI => 7,
  :DIV => 8,
  :POW => 9,
  :VAR => 10,
  :UMINUS => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "LEFT_BRACKET",
  "RIGHT_BRACKET",
  "ADD",
  "SUB",
  "MULTI",
  "DIV",
  "POW",
  "VAR",
  "UMINUS",
  "$start",
  "program",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = Exp::AST.new([val[0]]) 
    result
end

def _reduce_2(val, _values, result)
 result = Exp::AST.new([]) 
    result
end

def _reduce_3(val, _values, result)
 result = Exp::AST::Addition.new(val[0], val[2]) 
    result
end

def _reduce_4(val, _values, result)
 result = Exp::AST::Subtraction.new(val[0], val[2]) 
    result
end

def _reduce_5(val, _values, result)
 result = Exp::AST::Multiplication.new(val[0], val[2]) 
    result
end

def _reduce_6(val, _values, result)
 result = Exp::AST::Division.new(val[0], val[2]) 
    result
end

def _reduce_7(val, _values, result)
 result = Exp::AST::Exponentiation.new(val[0], val[2]) 
    result
end

def _reduce_8(val, _values, result)
 result = Exp::AST::Brackets.new(val[1]) 
    result
end

def _reduce_9(val, _values, result)
 result = Exp::AST::Number.new(-1 * val[1]) 
    result
end

def _reduce_10(val, _values, result)
 result = Exp::AST::Number.new(val[0]) 
    result
end

def _reduce_11(val, _values, result)
 result = Exp::AST::Variable.new(val[0]) 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Exp
